{"ast":null,"code":"import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { AUTH_TOKEN } from \"common/constants\";\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  fetchPolity: \"network-only\"\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: { ...headers,\n      Authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: \"network-only\"\n    }\n  }\n});\nexport default client;","map":{"version":3,"sources":["/home/m1ck0/Desktop/projects/react-template/src/api/index.js"],"names":["ApolloClient","createHttpLink","InMemoryCache","setContext","AUTH_TOKEN","httpLink","uri","fetchPolity","authLink","_","headers","token","localStorage","getItem","Authorization","client","link","concat","cache","defaultOptions","watchQuery","fetchPolicy"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,MAAMC,QAAQ,GAAGJ,cAAc,CAAC;AAC9BK,EAAAA,GAAG,EAAE,+BADyB;AAE9BC,EAAAA,WAAW,EAAE;AAFiB,CAAD,CAA/B;AAKA,MAAMC,QAAQ,GAAGL,UAAU,CAAC,CAACM,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBT,UAArB,CAAd;AAEA,SAAO;AACLM,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAT0B,CAA3B;AAWA,MAAMI,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC9BgB,EAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBZ,QAAhB,CADwB;AAE9Ba,EAAAA,KAAK,EAAE,IAAIhB,aAAJ,EAFuB;AAG9BiB,EAAAA,cAAc,EAAE;AACdC,IAAAA,UAAU,EAAE;AACVC,MAAAA,WAAW,EAAE;AADH;AADE;AAHc,CAAjB,CAAf;AAUA,eAAeN,MAAf","sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nimport { AUTH_TOKEN } from \"common/constants\";\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  fetchPolity: \"network-only\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n\n  return {\n    headers: {\n      ...headers,\n      Authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: \"network-only\",\n    },\n  },\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}